{"version":3,"sources":["tek.progress-bar.js"],"names":["angular","module","run","$templateCache","put","directive","scope","manager","containerClass","barClass","ngModel","restrict","transclude","controllerAs","templateUrl","bindToController","controller","$scope","$element","ProgressObj","element","divElements","find","this","containerElement","barContainer","value","bar","settings","fullClass","emptyClass","prototype","get","set","val","css","updateClasses","removeClass","addClass","setAnimation","init","progressObj","facade","newVal","undefined","$evalAsync","_getDefer","resolve","$on","_updateDefer","$watch","oldVal","_updateValue","requestAnimationFrame","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","factory","$q","defaultSettings","deferred","defer","instance","lastVal","animation","requiredClear","intervalCont","incrementStrategy","stat","rnd","Math","random","round","interval","increment","obj","setInterval","self","clear","clearInterval","isInProgress","promise","then","data","getPromise","Error","increase","start","stop","done","reset","animationVal","isAnimated"],"mappings":"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","file":"tek.progress-bar.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    angular.module('Tek.progressBar', []).run(['$templateCache', function ($templateCache) {\r\n        $templateCache.put('Tek.progressBarDirective.html', \"<div class='progress' ng-class='bar.containerClass'><div class='progress-bar' ng-class='bar.barClass' ng-transclude></div></div>\");\r\n    }]);\r\n}());\n(function () {\r\n    \"use strict\";\r\n    angular.module('Tek.progressBar').directive('tekProgressBar', function () {\r\n        return {\r\n            scope: {\r\n                manager: \"=\",\r\n                containerClass: \"@class\",\r\n                barClass: \"@\",\r\n                ngModel: \"=\"\r\n            },\r\n            restrict: \"E\",\r\n            transclude: true,\r\n            controllerAs: \"bar\",\r\n            templateUrl: \"Tek.progressBarDirective.html\",\r\n            bindToController: true,\r\n            controller: ['$scope', '$element', function ($scope, $element) {\r\n                var bar = this;\r\n\r\n                var settings = {\r\n                    fullClass: 'full-bar',\r\n                    emptyClass: 'empty-bar'\r\n                };\r\n\r\n                function ProgressObj(element) {\r\n                    var divElements = element.find('div');\r\n                    this.containerElement = angular.element(divElements[0]);\r\n                    this.barContainer = angular.element(divElements[1]);\r\n                    this.value = 0;\r\n                }\r\n\r\n                ProgressObj.prototype.get = function () {\r\n                    return this.value;\r\n                };\r\n\r\n                ProgressObj.prototype.set = function (val) {\r\n                    this.value = val;\r\n                    this.barContainer.css('width', val + '%');\r\n                    this.updateClasses();\r\n                };\r\n\r\n                ProgressObj.prototype.updateClasses = function () {\r\n                    if (this.value === 0) {\r\n                        this.containerElement.removeClass(settings.fullClass);\r\n                        return this.containerElement.addClass(settings.emptyClass);\r\n                    }\r\n\r\n                    if (this.value === 100) {\r\n                        this.containerElement.removeClass(settings.emptyClass);\r\n                        return this.containerElement.addClass(settings.fullClass);\r\n                    }\r\n\r\n                    this.containerElement.removeClass(settings.fullClass);\r\n                    this.containerElement.removeClass(settings.emptyClass);\r\n                };\r\n\r\n                ProgressObj.prototype.setAnimation = function (val) {\r\n                    (val) ? this.barContainer.css('transition', '') : this.barContainer.css('transition', 'none');\r\n                };\r\n\r\n                bar.init = function () {\r\n                    bar.progressObj = new ProgressObj($element);\r\n\r\n                    var facade = {\r\n                        get: function () {\r\n                            return bar.progressObj.get();\r\n                        },\r\n                        set: function (newVal) {\r\n                            if (bar.ngModel !== undefined) { // todo setInterval problem\r\n                                $scope.$evalAsync(function () {\r\n                                    bar.ngModel = newVal;\r\n                                });\r\n                            } else {\r\n                                bar.progressObj.set(newVal);\r\n                            }\r\n                        },\r\n                        setAnimation: function (val) {\r\n                            bar.progressObj.setAnimation(val);\r\n                        }\r\n                    };\r\n\r\n                    if (bar.manager) {\r\n                        bar.manager._getDefer().resolve(facade);\r\n\r\n                        $scope.$on('$destroy', function () {\r\n                            bar.manager._updateDefer();\r\n                        });\r\n                    }\r\n\r\n                    if (bar.ngModel !== undefined) {\r\n                        $scope.$watch('bar.ngModel', function (newVal, oldVal) {\r\n                            if(newVal !== oldVal) {\r\n                                if(bar.manager) {\r\n                                    bar.manager._updateValue(newVal);\r\n                                }\r\n                                bar.progressObj.set(newVal);\r\n                            }\r\n                        });\r\n                    }\r\n                };\r\n                bar.init();\r\n            }]\r\n        }\r\n    });\r\n}());\n(function () {\r\n    \"use strict\";\r\n    var requestAnimationFrame = (function () {\r\n        return window.requestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame ||\r\n            window.mozRequestAnimationFrame ||\r\n            window.oRequestAnimationFrame ||\r\n            window.msRequestAnimationFrame ||\r\n            function (callback) {\r\n                window.setTimeout(callback, 1000 / 60);\r\n            };\r\n    })();\r\n\r\n    angular.module('Tek.progressBar').factory('progressBarManager', ['$q', function ($q) {\r\n        return function (defaultSettings) {\r\n            var deferred = $q.defer();\r\n            var instance = null;\r\n            var lastVal = 0;\r\n            var animation = true;\r\n            var requiredClear = false;\r\n\r\n            var intervalCont = (function () {\r\n                var incrementStrategy = function (stat) {\r\n                    var rnd;\r\n                    if (stat >= 0 && stat < 25) {\r\n                        // Start out between 3 - 6% increments\r\n                        rnd = (Math.random() * (5 - 3 + 1) + 3);\r\n                    } else if (stat >= 25 && stat < 65) {\r\n                        // increment between 0 - 3%\r\n                        rnd = (Math.random() * 3);\r\n                    } else if (stat >= 65 && stat < 90) {\r\n                        // increment between 0 - 2%\r\n                        rnd = (Math.random() * 2);\r\n                    } else if (stat >= 90 && stat < 99) {\r\n                        // finally, increment it .5 %\r\n                        rnd = 0.5;\r\n                    } else {\r\n                        // after 99%, don't increment:\r\n                        rnd = 0;\r\n                    }\r\n                    return Math.round((stat + rnd) * 100) / 100;\r\n                };\r\n\r\n                var interval = null;\r\n                return {\r\n                    increment: function () {\r\n                        obj.set(incrementStrategy(lastVal));\r\n                    },\r\n                    setInterval: function () {\r\n                        var self = this;\r\n                        if (requiredClear) {\r\n                            requiredClear = false;\r\n                            obj.clear();\r\n                        }\r\n\r\n                        if (!interval) {\r\n                            interval = setInterval(function () {\r\n                                self.increment();\r\n                            }, 300);\r\n                        }\r\n                    },\r\n                    clearInterval: function () {\r\n                        clearInterval(interval);\r\n                        interval = null;\r\n                    },\r\n                    isInProgress: function () {\r\n                        return !!interval;\r\n                    }\r\n                };\r\n            }());\r\n\r\n            var obj = {\r\n                _getDefer: function () {\r\n                    return deferred;\r\n                },\r\n                _updateDefer: function () {\r\n                    deferred = $q.defer();\r\n                    instance = null;\r\n                    deferred.promise.then(function (data) {\r\n                        instance = data;\r\n                        instance.set(lastVal);\r\n                    });\r\n                },\r\n                _updateValue: function (val) {\r\n                    lastVal = val;\r\n                },\r\n                getPromise: function () {\r\n                    return deferred.promise;\r\n                },\r\n                set: function (val) {\r\n                    //Checking value is number and not NaN\r\n                    if (typeof val !== 'number' || val !== val) {\r\n                        throw new Error(\"Wrong value\");\r\n                    }\r\n                    if (val < 0) {\r\n                        val = 0;\r\n                    }\r\n                    if (val > 100) {\r\n                        val = 100;\r\n                    }\r\n                    lastVal = val;\r\n\r\n                    //todo rewrite\r\n                    if (requiredClear) {\r\n                        requiredClear = false;\r\n                        this.clear(val);\r\n                        return this;\r\n                    } else {\r\n                        if (instance) {\r\n                            instance.set(lastVal);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                get: function () {\r\n                    return lastVal;\r\n                },\r\n                isInProgress: function () {\r\n                    return intervalCont.isInProgress();\r\n                },\r\n                increase: function (value) {\r\n                    (value) ? this.set(lastVal + value) : intervalCont.increment();\r\n                    return this;\r\n                },\r\n                start: function () {\r\n                    intervalCont.setInterval();\r\n                    return this;\r\n                },\r\n                stop: function () {\r\n                    intervalCont.clearInterval();\r\n                    return this;\r\n                },\r\n                done: function () {\r\n                    this.stop();\r\n                    this.set(100);\r\n                    requiredClear = true;\r\n                    return this;\r\n                },\r\n                reset: function () {\r\n                    this.stop();\r\n                    this.set(0);\r\n                    return this;\r\n                },\r\n                clear: function (val) {\r\n                    var animationVal = this.isAnimated();\r\n                    var self = this;\r\n                    this.stop();\r\n                    this.setAnimation(false);\r\n                    this.reset();\r\n\r\n                    var deferred = $q.defer();\r\n                    requestAnimationFrame(function () {\r\n                        self.setAnimation(animationVal);\r\n                        deferred.resolve();\r\n                    });\r\n\r\n                    deferred.promise.then(function () {\r\n                        if(val !== undefined) {\r\n                            self.set(val);\r\n                        }\r\n                    });\r\n\r\n                    return this;\r\n                },\r\n                setAnimation: function (val) {\r\n                    animation = !!val;\r\n                    deferred.promise.then(function (data) {\r\n                        data.setAnimation(animation);\r\n                    });\r\n                    return this;\r\n                },\r\n                isAnimated: function () {\r\n                    return animation;\r\n                }\r\n            };\r\n\r\n            obj._updateDefer(0);\r\n\r\n            return obj;\r\n        }\r\n    }]);\r\n}());"],"sourceRoot":"/source/"}