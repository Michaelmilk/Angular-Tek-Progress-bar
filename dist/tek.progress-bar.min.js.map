{"version":3,"sources":["tek.progress-bar.js"],"names":["angular","module","run","$templateCache","put","directive","scope","manager","containerClass","barClass","ngModel","mode","restrict","transclude","controllerAs","templateUrl","bindToController","controller","$scope","$element","ProgressObj","element","divElements","find","this","containerElement","addClass","settings","barContainer","value","bar","fullClass","emptyClass","verticalClass","horizontalClass","prototype","get","set","val","css","updateClasses","console","log","removeClass","setAnimation","init","progressObj","facade","newVal","undefined","$evalAsync","_getDefer","resolve","$on","_updateDefer","$watch","_updateValue","requestAnimationFrame","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","factory","$q","deferred","defer","instance","lastVal","animation","requiredClear","intervalCont","incrementStrategy","stat","rnd","Math","random","round","interval","increment","obj","setInterval","self","clear","clearInterval","isInProgress","promise","then","data","getPromise","Error","increase","start","stop","done","reset","animationVal","isAnimated"],"mappings":"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","file":"tek.progress-bar.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    angular.module('Tek.progressBar', []).run(['$templateCache', function ($templateCache) {\r\n        $templateCache.put('Tek.progressBarDirective.html', \"<div class='progress' ng-class='bar.containerClass'><div class='progress-bar' ng-class='bar.barClass' ng-transclude></div></div>\");\r\n    }]);\r\n}());\n(function () {\r\n    \"use strict\";\r\n    angular.module('Tek.progressBar').directive('tekProgressBar', function () {\r\n        return {\r\n            scope: {\r\n                manager: \"=\",\r\n                containerClass: \"@class\",\r\n                barClass: \"@\",\r\n                ngModel: \"=\",\r\n                mode: '@'\r\n            },\r\n            restrict: \"E\",\r\n            transclude: true,\r\n            controllerAs: \"bar\",\r\n            templateUrl: \"Tek.progressBarDirective.html\",\r\n            bindToController: true,\r\n            controller: ['$scope', '$element', function ($scope, $element) {\r\n                var bar = this;\r\n\r\n                var settings = {\r\n                    fullClass: 'full-bar',\r\n                    emptyClass: 'empty-bar',\r\n                    verticalClass: 'vertical',\r\n                    horizontalClass: ''\r\n                };\r\n\r\n                function ProgressObj(element, mode) {\r\n                    var divElements = element.find('div');\r\n                    this.mode = mode;\r\n                    this.containerElement = angular.element(divElements[0]);\r\n                    this.containerElement.addClass(settings[mode + 'Class']);\r\n                    this.barContainer = angular.element(divElements[1]);\r\n                    this.value = 0;\r\n                }\r\n\r\n                ProgressObj.prototype.get = function () {\r\n                    return this.value;\r\n                };\r\n\r\n                ProgressObj.prototype.set = function (val) {\r\n                    this.value = val;\r\n                    if(this.mode === 'horizontal'){\r\n                        this.barContainer.css('width', val + '%');\r\n                    }\r\n                    if(this.mode === 'vertical'){\r\n                        this.barContainer.css('height', val + '%');\r\n                    }\r\n                    this.updateClasses();\r\n                };\r\n\r\n                ProgressObj.prototype.updateClasses = function () {\r\n                    console.log(this.value);\r\n                    if (this.value <= 0) {\r\n                        this.containerElement.removeClass(settings.fullClass);\r\n                        return this.containerElement.addClass(settings.emptyClass);\r\n                    }\r\n\r\n                    if (this.value >= 100) {\r\n                        this.containerElement.removeClass(settings.emptyClass);\r\n                        return this.containerElement.addClass(settings.fullClass);\r\n                    }\r\n\r\n                    this.containerElement.removeClass(settings.fullClass);\r\n                    this.containerElement.removeClass(settings.emptyClass);\r\n                };\r\n\r\n                ProgressObj.prototype.setAnimation = function (val) {\r\n                    (val) ? this.barContainer.css('transition', '') : this.barContainer.css('transition', 'none');\r\n                };\r\n\r\n                bar.init = function () {\r\n                    bar.mode = (bar.mode === 'vertical') ? bar.mode : 'horizontal';\r\n                    bar.progressObj = new ProgressObj($element, bar.mode);\r\n                    var facade = {\r\n                        get: function () {\r\n                            return bar.progressObj.get();\r\n                        },\r\n                        set: function (newVal) {\r\n                            if (bar.ngModel !== undefined) { // todo setInterval problem\r\n                                $scope.$evalAsync(function () {\r\n                                    bar.ngModel = newVal;\r\n                                });\r\n                            } else {\r\n                                bar.progressObj.set(newVal);\r\n                            }\r\n                        },\r\n                        setAnimation: function (val) {\r\n                            bar.progressObj.setAnimation(val);\r\n                        }\r\n                    };\r\n\r\n                    if (bar.manager) {\r\n                        bar.manager._getDefer().resolve(facade);\r\n                        $scope.$on('$destroy', function () {\r\n                            bar.manager._updateDefer();\r\n                        });\r\n                    }\r\n\r\n                    if (bar.ngModel !== undefined) {\r\n                        $scope.$watch('bar.ngModel', function (newVal) {\r\n                            if(typeof newVal !== 'number' || newVal < 0 || newVal !== newVal){\r\n                                newVal = 0;\r\n                            }\r\n\r\n                            if(newVal > 100){\r\n                                newVal = 100;\r\n                            }\r\n\r\n                            if (bar.manager) {\r\n                                bar.manager._updateValue(newVal);\r\n                            }\r\n                            bar.progressObj.set(newVal);\r\n                        });\r\n                    }\r\n                };\r\n                bar.init();\r\n            }]\r\n        }\r\n    });\r\n}());\n(function () {\r\n    \"use strict\";\r\n    var requestAnimationFrame = (function () {\r\n        return window.requestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame ||\r\n            window.mozRequestAnimationFrame ||\r\n            window.oRequestAnimationFrame ||\r\n            window.msRequestAnimationFrame ||\r\n            function (callback) {\r\n                window.setTimeout(callback, 1000 / 60);\r\n            };\r\n    })();\r\n\r\n    angular.module('Tek.progressBar').factory('progressBarManager', ['$q', function ($q) {\r\n        return function () {\r\n            var deferred = $q.defer();\r\n            var instance = null;\r\n            var lastVal = 0;\r\n            var animation = true;\r\n            var requiredClear = false;\r\n\r\n            var intervalCont = (function () {\r\n                var incrementStrategy = function (stat) {\r\n                    var rnd;\r\n                    if (stat >= 0 && stat < 25) {\r\n                        // Start out between 3 - 6% increments\r\n                        rnd = (Math.random() * (5 - 3 + 1) + 3);\r\n                    } else if (stat >= 25 && stat < 65) {\r\n                        // increment between 0 - 3%\r\n                        rnd = (Math.random() * 3);\r\n                    } else if (stat >= 65 && stat < 90) {\r\n                        // increment between 0 - 2%\r\n                        rnd = (Math.random() * 2);\r\n                    } else if (stat >= 90 && stat < 99) {\r\n                        // finally, increment it .5 %\r\n                        rnd = 0.5;\r\n                    } else {\r\n                        // after 99%, don't increment:\r\n                        rnd = 0;\r\n                    }\r\n                    return Math.round((stat + rnd) * 100) / 100;\r\n                };\r\n\r\n                var interval = null;\r\n                return {\r\n                    increment: function () {\r\n                        obj.set(incrementStrategy(lastVal));\r\n                    },\r\n                    setInterval: function () {\r\n                        var self = this;\r\n                        if (requiredClear) {\r\n                            requiredClear = false;\r\n                            obj.clear();\r\n                        }\r\n\r\n                        if (!interval) {\r\n                            interval = setInterval(function () {\r\n                                self.increment();\r\n                            }, 300);\r\n                        }\r\n                    },\r\n                    clearInterval: function () {\r\n                        clearInterval(interval);\r\n                        interval = null;\r\n                    },\r\n                    isInProgress: function () {\r\n                        return !!interval;\r\n                    }\r\n                };\r\n            }());\r\n\r\n            var obj = {\r\n                _getDefer: function () {\r\n                    return deferred;\r\n                },\r\n                _updateDefer: function () {\r\n                    deferred = $q.defer();\r\n                    instance = null;\r\n                    deferred.promise.then(function (data) {\r\n                        instance = data;\r\n                        instance.set(lastVal);\r\n                    });\r\n                },\r\n                _updateValue: function (val) {\r\n                    lastVal = val;\r\n                },\r\n                getPromise: function () {\r\n                    return deferred.promise;\r\n                },\r\n                set: function (val) {\r\n                    //Checking value is number and not NaN\r\n                    if (typeof val !== 'number' || val !== val) {\r\n                        throw new Error(\"Wrong value\");\r\n                    }\r\n                    if (val < 0) {\r\n                        val = 0;\r\n                    }\r\n                    if (val > 100) {\r\n                        val = 100;\r\n                    }\r\n                    lastVal = val;\r\n\r\n                    //todo rewrite\r\n                    if (requiredClear) {\r\n                        requiredClear = false;\r\n                        this.clear(val);\r\n                        return this;\r\n                    } else {\r\n                        if (instance) {\r\n                            instance.set(lastVal);\r\n                        }\r\n                    }\r\n                    return this;\r\n                },\r\n                get: function () {\r\n                    return lastVal;\r\n                },\r\n                isInProgress: function () {\r\n                    return intervalCont.isInProgress();\r\n                },\r\n                increase: function (value) {\r\n                    if(typeof value === 'number' && value === value){\r\n                        this.set(lastVal + value);\r\n                    }else{\r\n                        intervalCont.increment();\r\n                    }\r\n                    return this;\r\n                },\r\n                start: function () {\r\n                    intervalCont.setInterval();\r\n                    return this;\r\n                },\r\n                stop: function () {\r\n                    intervalCont.clearInterval();\r\n                    return this;\r\n                },\r\n                done: function () {\r\n                    this.stop();\r\n                    this.set(100);\r\n                    requiredClear = true;\r\n                    return this;\r\n                },\r\n                reset: function () {\r\n                    this.stop();\r\n                    this.set(0);\r\n                    return this;\r\n                },\r\n                clear: function (val) {\r\n                    var animationVal = this.isAnimated();\r\n                    var self = this;\r\n                    this.stop();\r\n                    this.setAnimation(false);\r\n                    this.reset();\r\n\r\n                    var deferred = $q.defer();\r\n                    requestAnimationFrame(function () {\r\n                        self.setAnimation(animationVal);\r\n                        deferred.resolve();\r\n                    });\r\n\r\n                    deferred.promise.then(function () {\r\n                        if(val !== undefined) {\r\n                            self.set(val);\r\n                        }\r\n                    });\r\n\r\n                    return this;\r\n                },\r\n                setAnimation: function (val) {\r\n                    animation = !!val;\r\n                    deferred.promise.then(function (data) {\r\n                        data.setAnimation(animation);\r\n                    });\r\n                    return this;\r\n                },\r\n                isAnimated: function () {\r\n                    return animation;\r\n                }\r\n            };\r\n\r\n            obj._updateDefer(0);\r\n\r\n            return obj;\r\n        }\r\n    }]);\r\n}());"],"sourceRoot":"/source/"}