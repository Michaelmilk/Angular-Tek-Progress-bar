{"version":3,"sources":["progressBarModule.js"],"names":["angular","module","directive","scope","control","containerClass","barClass","successClass","value","restrict","transclude","controllerAs","template","bindToController","controller","$q","$scope","$element","ProgressObj","barContainer","this","bar","barElement","element","find","settings","fullClass","emptyClass","prototype","get","set","val","css","updateClasses","removeClass","addClass","setAnimation","init","progressObj","facade","newVal","updateAnimation","_getDefer","resolve","$on","_updateDefer","$watch","requestAnimationFrame","window","webkitRequestAnimationFrame","mozRequestAnimationFrame","oRequestAnimationFrame","msRequestAnimationFrame","callback","setTimeout","factory","defaultSettings","deferred","defer","instance","lastVal","animation","requairedClear","intervalCont","progressIncrementation","stat","rnd","Math","random","round","interval","increment","obj","setInterval","self","clearInterval","isInProgress","promise","then","data","clear","Error","increase","start","stop","done","reset","animationVal","isAnimated"],"mappings":"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","file":"progressBarModule.min.js","sourcesContent":["(function () {\r\n    \"use strict\";\r\n    angular.module('Tek.progressBar',[]);\r\n}());\n(function () {\r\n    \"use strict\";\r\n    angular.module('Tek.progressBar').directive('progressBar', function () {\r\n        return {\r\n            scope: {\r\n                control: \"=\",\r\n                containerClass: \"@class\",\r\n                barClass: \"@\",\r\n                successClass: \"@\",\r\n                value: \"=\"\r\n            },\r\n            restrict: \"E\",\r\n            transclude: true,\r\n            controllerAs: \"bar\",\r\n            template: \"<div class='progress {{::bar.containerClass}}'><div class='progress-bar {{::bar.barClass}}' ng-transclude></div></div>\",\r\n            bindToController: true,\r\n            controller: ['$q', '$scope', '$element', function ($q, $scope, $element) {\r\n                var bar = this;\r\n                var barElement = angular.element($element.find('div')[1]);\r\n                var settings = {\r\n                    fullClass: 'full-bar',\r\n                    emptyClass: 'empty-bar'\r\n                };\r\n\r\n                function ProgressObj(barContainer) {\r\n                    this.barContainer = barContainer;\r\n                    this.value = 0;\r\n                }\r\n\r\n                ProgressObj.prototype.get = function () {\r\n                  return this.value;\r\n                };\r\n\r\n                ProgressObj.prototype.set = function (val) {\r\n                    this.value = val;\r\n                    this.barContainer.css('width', val + '%');\r\n                    this.updateClasses();\r\n                };\r\n\r\n                ProgressObj.prototype.updateClasses = function () {\r\n                    if(this.value === 0){\r\n                        this.barContainer.removeClass(settings.fullClass);\r\n                        return this.barContainer.addClass(settings.emptyClass);\r\n                    }\r\n\r\n                    if(this.value === 100){\r\n                        this.barContainer.removeClass(settings.emptyClass);\r\n                        return this.barContainer.addClass(settings.fullClass);\r\n                    }\r\n\r\n                    this.barContainer.removeClass(settings.fullClass);\r\n                    this.barContainer.removeClass(settings.emptyClass);\r\n                };\r\n\r\n                ProgressObj.prototype.setAnimation = function (val) {\r\n                    (val) ? this.barContainer.css('transition', 'width 0.6s ease 0s') : this.barContainer.css('transition', 'none');\r\n                };\r\n\r\n                bar.init = function () {\r\n                    bar.progressObj = new ProgressObj(barElement);\r\n\r\n                    var facade  = {\r\n                        get: function () {\r\n                            return bar.progressObj.get();\r\n                        },\r\n                        set: function (newVal) {\r\n                            bar.progressObj.set(newVal);\r\n                        },\r\n                        updateAnimation: function (val) {\r\n                            bar.progressObj.setAnimation(val);\r\n                        }\r\n                    };\r\n\r\n                    if (bar.control) {\r\n                        bar.control._getDefer().resolve(facade);\r\n\r\n                        $scope.$on('$destroy', function () {\r\n                            bar.control._updateDefer();\r\n                        });\r\n                    }else{\r\n                        $scope.$watch('bar.value', function (newVal) {\r\n                            bar.progressObj.set(newVal);\r\n                        });\r\n                    }\r\n                };\r\n                bar.init();\r\n            }]\r\n        }\r\n    });\r\n}());\n(function () {\r\n    \"use strict\";\r\n    var requestAnimationFrame = (function () {\r\n        return window.requestAnimationFrame ||\r\n            window.webkitRequestAnimationFrame ||\r\n            window.mozRequestAnimationFrame ||\r\n            window.oRequestAnimationFrame ||\r\n            window.msRequestAnimationFrame ||\r\n            function (/* function */ callback, /* DOMElement */ element) {\r\n                window.setTimeout(callback, 1000 / 60);\r\n            };\r\n    })();\r\n\r\n    angular.module('Tek.progressBar').factory('progressBarParams', ['$q', function ($q) {\r\n        return function (defaultSettings) {\r\n            var deferred = $q.defer();\r\n            var instance = null;\r\n            var lastVal = 0;\r\n            var animation = true;\r\n            var requairedClear = false;\r\n\r\n            var intervalCont = (function () {\r\n                var progressIncrementation = function (stat) {\r\n                    var rnd = 0;\r\n                    if (stat >= 0 && stat < 25) {\r\n                        // Start out between 3 - 6% increments\r\n                        rnd = (Math.random() * (5 - 3 + 1) + 3);\r\n                    } else if (stat >= 25 && stat < 65) {\r\n                        // increment between 0 - 3%\r\n                        rnd = (Math.random() * 3);\r\n                    } else if (stat >= 65 && stat < 90) {\r\n                        // increment between 0 - 2%\r\n                        rnd = (Math.random() * 2);\r\n                    } else if (stat >= 90 && stat < 99) {\r\n                        // finally, increment it .5 %\r\n                        rnd = 0.5;\r\n                    } else {\r\n                        // after 99%, don't increment:\r\n                        rnd = 0;\r\n                    }\r\n                    return Math.round((stat + rnd) * 100) / 100;\r\n                };\r\n\r\n                var interval = null;\r\n                return {\r\n                    increment: function () {\r\n                        obj.set(progressIncrementation(lastVal));\r\n                    },\r\n                    setInterval: function () {\r\n                        var self = this;\r\n                        if (!interval) {\r\n                            interval = setInterval(function () {\r\n                                self.increment();\r\n                            }, 300);\r\n                        }\r\n                    },\r\n                    clearInterval: function () {\r\n                        clearInterval(interval);\r\n                        interval = null;\r\n                    },\r\n                    isInProgress: function () {\r\n                        return !!interval;\r\n                    }\r\n                };\r\n            }());\r\n\r\n            var obj = {\r\n                _getDefer: function () {\r\n                    return deferred;\r\n                },\r\n                _updateDefer: function () {\r\n                    deferred = $q.defer();\r\n                    instance = null;\r\n                    deferred.promise.then(function (data) {\r\n                        instance = data;\r\n                        if (lastVal) {\r\n                            instance.set(lastVal);\r\n                        }\r\n                    });\r\n                },\r\n                set: function (val) {\r\n                    //todo rewrite\r\n                    if(requairedClear){\r\n                        requairedClear = false;\r\n                        this.clear();\r\n                    }\r\n\r\n                    //Checking value is number and not NaN\r\n                    if (typeof val !== 'number' || val !== val) {\r\n                        throw new Error(\"Wrong value\");\r\n                    }\r\n                    if (val < 0) {\r\n                        val = 0;\r\n                    }\r\n                    if (val > 100) {\r\n                        val = 100;\r\n                    }\r\n                    lastVal = val;\r\n                    if (instance) {\r\n                        instance.set(lastVal);\r\n                    }\r\n                    return obj;\r\n                },\r\n                get: function () {\r\n                    return lastVal;\r\n                },\r\n                isInProgress: function () {\r\n                    return intervalCont.isInProgress();\r\n                },\r\n                increase: function () {\r\n                    intervalCont.increment();\r\n                    return obj;\r\n                },\r\n                start: function () {\r\n                    intervalCont.setInterval();\r\n                    return obj;\r\n                },\r\n                stop: function () {\r\n                    intervalCont.clearInterval();\r\n                    return obj;\r\n                },\r\n                done: function () {\r\n                    this.stop();\r\n                    this.set(100);\r\n                    requairedClear = true;\r\n                },\r\n                reset: function () {\r\n                    this.stop();\r\n                    this.set(0);\r\n                },\r\n                clear: function () {\r\n                    var self = this;\r\n                    var animationVal = this.isAnimated();\r\n                    this.stop();\r\n                    this.setAnimation(false);\r\n                    this.reset();\r\n                    requestAnimationFrame(function () {\r\n                        self.setAnimation(animationVal);\r\n                    });\r\n                    return obj;\r\n                },\r\n                setAnimation: function (val) {\r\n                    animation = !!val;\r\n                    deferred.promise.then(function (data) {\r\n                        data.updateAnimation(animation);\r\n                    });\r\n                    return obj;\r\n                },\r\n                isAnimated: function () {\r\n                    return animation;\r\n                }\r\n            };\r\n\r\n            obj._updateDefer(0);\r\n\r\n            return obj;\r\n        }\r\n    }]);\r\n}());"],"sourceRoot":"/source/"}